@LIT_SITE_CFG_IN_HEADER@

import sys
from pathlib import Path

p = Path(__file__).with_name('fuzzer_lib_location.txt')
with p.open('r') as f:
    config.rlc_fuzzer_lib = f.read()

p = Path(__file__).with_name('runtime_lib_location.txt')
with p.open('r') as f:
    config.rlc_runtime_lib = f.read()

p = Path(__file__).with_name('pyrlc_lib_location.txt')
with p.open('r') as f:
    config.rlc_pyrlc_lib = f.read()

config.host_triple = "@LLVM_HOST_TRIPLE@"
config.target_triple = "@LLVM_TARGET_TRIPLE@"
config.llvm_include_dirs = "@LLVM_INCLUDE_DIRS@"
config.llvm_src_root = "@LLVM_SOURCE_DIR@"
config.llvm_obj_root = "@LLVM_BINARY_DIR@"
config.llvm_tools_dir = "@LLVM_TOOLS_DIR@"
config.llvm_libs_dir = "@LLVM_LIBS_DIR@"
config.llvm_shlib_dir = "@SHLIBDIR@"
config.llvm_shlib_ext = "@SHLIBEXT@"
config.llvm_exe_ext = "@EXEEXT@"
config.llvm_lib_ext = "@LIBEXT@"
config.llvm_shared_ext = "@SHAREDEXT@"
config.lit_tools_dir = "@LLVM_LIT_TOOLS_DIR@"
config.python_executable = "@PYTHON_EXECUTABLE@"
config.gold_executable = "@GOLD_EXECUTABLE@"
config.ld64_executable = "@LD64_EXECUTABLE@"
config.enable_shared = @ENABLE_SHARED@
config.enable_assertions = @ENABLE_ASSERTIONS@
config.targets_to_build = "@TARGETS_TO_BUILD@"
config.native_target = "@LLVM_NATIVE_ARCH@"
config.llvm_bindings = "@LLVM_BINDINGS@".split(' ')
config.host_os = "@HOST_OS@"
config.host_cc = "@HOST_CC@"
config.host_cxx = "@HOST_CXX@"
config.enable_libcxx = "@LLVM_ENABLE_LIBCXX@"
config.host_ldflags = '@HOST_LDFLAGS@'
config.llvm_use_sanitizer = "@LLVM_USE_SANITIZER@"
config.llvm_host_triple = '@LLVM_HOST_TRIPLE@'
config.host_arch = "@HOST_ARCH@"
config.rlc_tool_dir = "@CMAKE_BINARY_DIR@/tool/rlc/"
config.rlc_opt_tool_dir = "@CMAKE_BINARY_DIR@/tool/rlc-opt/"
config.rlc_root_dir = "@CMAKE_SOURCE_DIR@"
config.rlc_obj_root = "@CMAKE_BINARY_DIR@"
config.rlc_stdlib = "@CMAKE_SOURCE_DIR@/stdlib"
config.python_scripts = "@CMAKE_SOURCE_DIR@/python/"

# Support substitution of the tools_dir with user parameters. This is
# used when we can't determine the tool dir at configuration time.
try:
    config.llvm_tools_dir = config.llvm_tools_dir % lit_config.params
    config.llvm_libs_dir = config.llvm_libs_dir % lit_config.params
    config.llvm_shlib_dir = config.llvm_shlib_dir % lit_config.params
except KeyError:
    e = sys.exc_info()[1]
    key, = e.args
    lit_config.fatal("unable to find %r parameter, use '--param=%s=VALUE'" % (key,key))

import lit.llvm
lit.llvm.initialize(lit_config, config)

# Let the main config do the real work.
lit_config.load_config(config, "@CMAKE_CURRENT_SOURCE_DIR@/lit.cfg.py")
